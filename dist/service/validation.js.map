{"version":3,"sources":["../../src/service/validation.js"],"names":["validateRequest","request","requiredKeys","_","isEmpty","Array","isArray","error","Error","key","match","keyPieces","split","set","length","hasOwnProperty","count","InvalidRequest","get","validateTransferRequest","requiredFields","isNaN","parseInt","toString","indexOf","parseFloat"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;AAKO,MAAMA,4CAAkB,CAACC,OAAD,EAAUC,eAAe,EAAzB,KAAgC;AAC3D,QAAIC,iBAAEC,OAAF,CAAUF,YAAV,KAA2B,CAACG,MAAMC,OAAN,CAAcJ,YAAd,CAAhC,EAA6D;AACzD,eAAO,IAAP;AACH;;AAED,QAAIK,QAAQ,IAAIC,eAAJ,EAAZ;;AAEA,SAAK,IAAIC,GAAT,IAAgBP,YAAhB,EAA8B;AAC1B,YAAIC,iBAAEC,OAAF,CAAUK,GAAV,CAAJ,EAAoB;AAChB;AACH;AACD,YAAIA,IAAIC,KAAJ,CAAU,4BAAV,CAAJ,EAA6C;AACzC,gBAAIC,YAAYF,IAAIG,KAAJ,CAAU,GAAV,CAAhB;AACA,gBAAIT,iBAAEC,OAAF,CAAUO,UAAU,CAAV,CAAV,KAA2BR,iBAAEC,OAAF,CAAUO,UAAU,CAAV,CAAV,CAA/B,EAAwD;AACpDJ,sBAAMM,GAAN,CAAU,aAAV,EAAyBJ,GAAzB;AACH;AACD,gBAAIE,UAAUG,MAAV,GAAmB,CAAvB,EAA0B;AACtBP,sBAAMM,GAAN,CAAU,kCAAV,EAA8CJ,GAA9C;AACH;AACD,gBAAI,CAACR,QAAQc,cAAR,CAAuBJ,UAAU,CAAV,CAAvB,CAAD,IAAyC,CAACV,QAAQU,UAAU,CAAV,CAAR,EAAsBI,cAAtB,CAAqCJ,UAAU,CAAV,CAArC,CAA1C,IAAgGR,iBAAEC,OAAF,CAAUH,QAAQU,UAAU,CAAV,CAAR,EAAsBA,UAAU,CAAV,CAAtB,CAAV,CAApG,EAAoJ;AAChJJ,sBAAMM,GAAN,CAAW,IAAGJ,GAAI,mBAAlB,EAAsCA,GAAtC;AACH;AACJ,SAXD,MAWO;AACH,gBAAIN,iBAAEC,OAAF,CAAUH,QAAQQ,GAAR,CAAV,CAAJ,EAA6B;AACzBF,sBAAMM,GAAN,CAAW,IAAGJ,GAAI,mBAAlB,EAAsCA,GAAtC;AACH;AACJ;AACJ;;AAED,QAAIF,MAAMS,KAAV,EAAiB;AACb,cAAM,IAAIC,uBAAJ,CAAoB,wCAApB,EAA6DV,MAAMW,GAAN,EAA7D,CAAN;AACH;AACJ,CAhCM;;AAkCP;;;;;AAKO,MAAMC,4DAA0B,CAAClB,OAAD,EAAUmB,iBAAiB,CAAC,MAAD,EAAS,IAAT,EAAe,QAAf,CAA3B,KAAwD;AAC3FpB,oBAAgBC,OAAhB,EAAyBmB,cAAzB;;AAEA,QAAIb,QAAQ,IAAIC,eAAJ,EAAZ;;AAEA,QAAIa,MAAMC,SAASrB,QAAQ,MAAR,CAAT,CAAN,KAAoCA,QAAQ,MAAR,EAAgBsB,QAAhB,GAA2BC,OAA3B,CAAmC,GAAnC,MAA4C,CAAC,CAArF,EAAwF;AACpFjB,cAAMM,GAAN,CAAW,yCAAX,EAAqD,MAArD;AACH;;AAED,QAAIQ,MAAMC,SAASrB,QAAQ,IAAR,CAAT,CAAN,KAAkCA,QAAQ,IAAR,EAAcsB,QAAd,GAAyBC,OAAzB,CAAiC,GAAjC,MAA0C,CAAC,CAAjF,EAAoF;AAChFjB,cAAMM,GAAN,CAAW,uCAAX,EAAmD,IAAnD;AACH;;AAED,QAAIQ,MAAMpB,QAAQ,QAAR,CAAN,KAA4BwB,WAAWxB,QAAQ,QAAR,CAAX,KAAiC,CAAjE,EAAoE;AAChEM,cAAMM,GAAN,CAAW,uDAAX,EAAmE,QAAnE;AACH;;AAED,QAAIN,MAAMS,KAAV,EAAiB;AACb,cAAM,IAAIC,uBAAJ,CAAoB,wCAApB,EAA6DV,MAAMW,GAAN,EAA7D,CAAN;AACH;AACJ,CApBM","file":"validation.js","sourcesContent":["import _ from 'lodash';\nimport Error from \"../data/error\";\nimport {InvalidRequest} from \"../exceptions/request\";\n\n/**\n * Validate the request parameter\n * @param request\n * @param requiredKeys\n */\nexport const validateRequest = (request, requiredKeys = []) => {\n    if (_.isEmpty(requiredKeys) || !Array.isArray(requiredKeys)) {\n        return true;\n    }\n\n    let error = new Error();\n\n    for (let key of requiredKeys) {\n        if (_.isEmpty(key)) {\n            continue;\n        }\n        if (key.match(/[a-zA-Z0-9]+\\.[a-zA-Z0-9]+/)) {\n            let keyPieces = key.split('.');\n            if (_.isEmpty(keyPieces[0]) || _.isEmpty(keyPieces[1])) {\n                error.set('Invalid Key', key);\n            }\n            if (keyPieces.length > 2) {\n                error.set('3 level nesting is not supported', key);\n            }\n            if (!request.hasOwnProperty(keyPieces[0]) || !request[keyPieces[0]].hasOwnProperty(keyPieces[1]) || _.isEmpty(request[keyPieces[0]][keyPieces[1]])) {\n                error.set(`\"${key}\" cannot be empty`, key);\n            }\n        } else {\n            if (_.isEmpty(request[key])) {\n                error.set(`\"${key}\" cannot be empty`, key);\n            }\n        }\n    }\n\n    if (error.count) {\n        throw new InvalidRequest(`Please check the details and try again`, error.get());\n    }\n};\n\n/**\n * Validate transfer Request params\n * @param request\n * @param requiredFields\n */\nexport const validateTransferRequest = (request, requiredFields = ['from', 'to', 'amount']) => {\n    validateRequest(request, requiredFields);\n\n    let error = new Error();\n\n    if (isNaN(parseInt(request['from'])) || request['from'].toString().indexOf('.') !== -1) {\n        error.set(`\"from\" should be a valid account number`, 'from');\n    }\n\n    if (isNaN(parseInt(request['to'])) || request['to'].toString().indexOf('.') !== -1) {\n        error.set(`\"to\" should be a valid account number`, 'to');\n    }\n\n    if (isNaN(request['amount']) || parseFloat(request['amount']) <= 0) {\n        error.set(`\"amount\" should be a numeric value and greater than 0`, 'amount');\n    }\n\n    if (error.count) {\n        throw new InvalidRequest(`Please check the details and try again`, error.get());\n    }\n};"]}