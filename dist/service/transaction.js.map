{"version":3,"sources":["../../src/service/transaction.js"],"names":["Transaction","constructor","request","connection","connect","config","host","db","port","user","username","password","database","connectionLimit","mysql","createPool","getBalances","query","parseInt","insertTransaction","data","result","insertId","getAccountDetails","e","isAmountAvailable","accountDetails","account","parseFloat","transferAmount","push","toFixed","transactionId"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA,MAAMA,WAAN,CAAkB;;AAEd;;;;AAIAC,gBAAYC,OAAZ,EAAqB;AACjB,aAAKC,UAAL,GAAkB,KAAKC,OAAL,EAAlB;AACA,aAAKF,OAAL,GAAeA,OAAf;AACH;;AAED;;;;AAIAE,cAAU;AACN,YAAIC,SAAS;AACTC,kBAAMC,WAAGD,IADA;AAETE,kBAAMD,WAAGC,IAFA;AAGTC,kBAAMF,WAAGG,QAHA;AAITC,sBAAUJ,WAAGI,QAJJ;AAKTC,sBAAUL,WAAGK,QALJ;AAMTC,6BAAiB;AANR,SAAb;;AASA,eAAOC,uBAAMC,UAAN,CAAiBV,MAAjB,CAAP;AACH;;AAED;;;;AAIA,UAAMW,WAAN,GAAoB;AAChB,YAAIC,QAAS,+CAA8CC,SAAS,KAAKhB,OAAL,CAAa,MAAb,CAAT,CAA+B,IAAGgB,SAAS,KAAKhB,OAAL,CAAa,IAAb,CAAT,CAA6B,GAA1H;;AAEA,eAAO,MAAM,KAAKC,UAAL,CAAgBc,KAAhB,CAAsBA,KAAtB,CAAb;AACH;;AAED;;;;;AAKA,UAAME,iBAAN,CAAwBC,IAAxB,EAA8B;AAC1B,YAAIH,QAAQ,wDAAZ;AACA,YAAII,SAAS,MAAM,KAAKlB,UAAL,CAAgBc,KAAhB,CAAsBA,KAAtB,EAA6B,CAACG,IAAD,CAA7B,CAAnB;;AAEA,eAAOC,OAAOC,QAAd;AACH;;AAED;;;;AAIA,UAAMC,iBAAN,GAA0B;AACtB,YAAIH,IAAJ;AACA,YAAI;AACAA,mBAAO,MAAM,KAAKJ,WAAL,EAAb;AACH,SAFD,CAEE,OAAOQ,CAAP,EAAU;AACR,kBAAMA,CAAN;AACH;;AAED,eAAOJ,IAAP;AACH;;AAED;;;;;AAKAK,sBAAkBC,cAAlB,EAAkC;AAC9B,aAAK,IAAIC,OAAT,IAAoBD,cAApB,EAAoC;AAChC,gBAAIR,SAASS,QAAQ,YAAR,CAAT,MAAoCT,SAAS,KAAKhB,OAAL,CAAa,MAAb,CAAT,CAAxC,EAAwE;AACpE;AACH;;AAED,gBAAI0B,WAAWD,QAAQ,SAAR,CAAX,KAAkCC,WAAW,KAAK1B,OAAL,CAAa,QAAb,CAAX,CAAtC,EAA0E;AACtE,uBAAO,IAAP;AACH;AACJ;;AAED,eAAO,KAAP;AACH;;AAED;;;;;AAKA,UAAM2B,cAAN,CAAqBH,cAArB,EAAqC;AACjC,YAAIN,OAAO,EAAX;;AAEA,aAAK,IAAIO,OAAT,IAAoBD,cAApB,EAAoC;AAChC,gBAAIE,WAAWD,QAAQ,YAAR,CAAX,MAAsCC,WAAW,KAAK1B,OAAL,CAAa,MAAb,CAAX,CAA1C,EAA4E;AACxEkB,qBAAKU,IAAL,CAAU,CAACH,QAAQ,YAAR,CAAD,EAAwB,CAACC,WAAW,KAAK1B,OAAL,CAAa,QAAb,CAAX,EAAmC6B,OAAnC,CAA2C,CAA3C,CAAzB,CAAV;AACH;;AAED,gBAAIH,WAAWD,QAAQ,YAAR,CAAX,MAAsCC,WAAW,KAAK1B,OAAL,CAAa,IAAb,CAAX,CAA1C,EAA0E;AACtEkB,qBAAKU,IAAL,CAAU,CAACH,QAAQ,YAAR,CAAD,EAAwBC,WAAW,KAAK1B,OAAL,CAAa,QAAb,CAAX,EAAmC6B,OAAnC,CAA2C,CAA3C,CAAxB,CAAV;AACH;AACJ;;AAED,YAAIC,gBAAgB,MAAM,KAAKb,iBAAL,CAAuBC,IAAvB,CAA1B;;AAEAM,yBAAiB,MAAM,KAAKV,WAAL,EAAvB;;AAEA,eAAO,CAACU,cAAD,EAAiBM,aAAjB,CAAP;AACH;AA3Ga;;kBA8GHhC,W","file":"transaction.js","sourcesContent":["import mysql from 'promise-mysql';\nimport {db} from '../config/config'\n\nclass Transaction {\n\n    /**\n     * Constructor\n     * @param request\n     */\n    constructor(request) {\n        this.connection = this.connect();\n        this.request = request;\n    }\n\n    /**\n     * Create db connection\n     * @return {*}\n     */\n    connect() {\n        let config = {\n            host: db.host,\n            port: db.port,\n            user: db.username,\n            password: db.password,\n            database: db.database,\n            connectionLimit: 100,\n        };\n\n        return mysql.createPool(config);\n    }\n\n    /**\n     * Get balances\n     * @return {Promise<*>}\n     */\n    async getBalances() {\n        let query = `SELECT * from balances WHERE account_no IN (${parseInt(this.request['from'])},${parseInt(this.request['to'])})`;\n\n        return await this.connection.query(query);\n    }\n\n    /**\n     * Insert transactions\n     * @param data\n     * @return {Promise<number>}\n     */\n    async insertTransaction(data) {\n        let query = 'INSERT INTO transactions (account_no, amount) VALUES ?';\n        let result = await this.connection.query(query, [data]);\n\n        return result.insertId;\n    }\n\n    /**\n     * Get account details\n     * @return {Promise<*>}\n     */\n    async getAccountDetails() {\n        let data;\n        try {\n            data = await this.getBalances();\n        } catch (e) {\n            throw e;\n        }\n\n        return data;\n    }\n\n    /**\n     * Check if amount is available\n     * @param accountDetails\n     * @return {boolean}\n     */\n    isAmountAvailable(accountDetails) {\n        for (let account of accountDetails) {\n            if (parseInt(account['account_no']) !== parseInt(this.request['from'])) {\n                continue;\n            }\n\n            if (parseFloat(account['balance']) >= parseFloat(this.request['amount'])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Transfer amount\n     * @param accountDetails\n     * @return {Promise<*[]>}\n     */\n    async transferAmount(accountDetails) {\n        let data = [];\n\n        for (let account of accountDetails) {\n            if (parseFloat(account['account_no']) === parseFloat(this.request['from'])) {\n                data.push([account['account_no'], -parseFloat(this.request['amount']).toFixed(2)]);\n            }\n\n            if (parseFloat(account['account_no']) === parseFloat(this.request['to'])) {\n                data.push([account['account_no'], parseFloat(this.request['amount']).toFixed(2)]);\n            }\n        }\n\n        let transactionId = await this.insertTransaction(data);\n\n        accountDetails = await this.getBalances();\n\n        return [accountDetails, transactionId];\n    }\n}\n\nexport default Transaction;"]}