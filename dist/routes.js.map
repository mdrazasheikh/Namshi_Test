{"version":3,"sources":["../src/routes.js"],"names":["router","Router","post","ctx","next","request","body","transactionId","transactions","Transaction","accountDetails","getAccountDetails","_","isEmpty","length","throw","isAmountAvailable","transferAmount","response","id","account","parseFloat","toFixed"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,SAAS,IAAIC,mBAAJ,EAAf;;AAEAD,OAAOE,IAAP,CAAY,WAAZ,EAAyB,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAC1C;AACA,6CAAwBD,IAAIE,OAAJ,CAAYC,IAApC;;AAEA,QAAIC,aAAJ;AACA,QAAIC,eAAe,IAAIC,qBAAJ,CAAgBN,IAAIE,OAAJ,CAAYC,IAA5B,CAAnB;AACA,QAAII,iBAAiB,MAAMF,aAAaG,iBAAb,EAA3B;;AAEA;AACA,QAAIC,iBAAEC,OAAF,CAAUH,cAAV,KAA6BA,eAAeI,MAAf,KAA0B,CAA3D,EAA8D;AAC1DX,YAAIY,KAAJ,CAAU,GAAV,EAAe,iEAAf;AACH;;AAED;AACA,QAAI,CAACP,aAAaQ,iBAAb,CAA+BN,cAA/B,CAAL,EAAqD;AACjDP,YAAIY,KAAJ,CAAU,GAAV,EAAe,gDAAf;AACH;;AAED;AACA,KAACL,cAAD,EAAiBH,aAAjB,IAAkC,MAAMC,aAAaS,cAAb,CAA4BP,cAA5B,CAAxC;;AAEA,QAAIQ,WAAW,EAACC,IAAIZ,aAAL,EAAf;;AAEA;AACA,SAAK,IAAIa,OAAT,IAAoBV,cAApB,EAAoC;AAChC,YAAIW,WAAWD,QAAQ,YAAR,CAAX,MAAsCC,WAAWlB,IAAIE,OAAJ,CAAYC,IAAZ,CAAiB,MAAjB,CAAX,CAA1C,EAAgF;AAC5EY,qBAAS,MAAT,IAAmBE,OAAnB;AACH;;AAED,YAAIC,WAAWD,QAAQ,YAAR,CAAX,MAAsCC,WAAWlB,IAAIE,OAAJ,CAAYC,IAAZ,CAAiB,IAAjB,CAAX,CAA1C,EAA8E;AAC1EY,qBAAS,IAAT,IAAiBE,OAAjB;AACH;AACJ;;AAEDF,aAAS,aAAT,IAA0BG,WAAWlB,IAAIE,OAAJ,CAAYC,IAAZ,CAAiB,QAAjB,CAAX,EAAuCgB,OAAvC,CAA+C,CAA/C,CAA1B;;AAEAnB,QAAIG,IAAJ,GAAWY,QAAX;;AAEA,UAAMd,MAAN;AACH,CAvCD;;kBAyCeJ,M","file":"routes.js","sourcesContent":["import Router from \"koa-router\";\nimport Transaction from './service/transaction';\nimport _ from 'lodash';\nimport {validateTransferRequest} from \"./service/validation\";\n\nconst router = new Router();\n\nrouter.post('/transfer', async (ctx, next) => {\n    // validate input\n    validateTransferRequest(ctx.request.body);\n\n    let transactionId;\n    let transactions = new Transaction(ctx.request.body);\n    let accountDetails = await transactions.getAccountDetails();\n\n    // check if accounts are valid\n    if (_.isEmpty(accountDetails) || accountDetails.length !== 2) {\n        ctx.throw(400, 'Accounts may not exist. Please check the accounts and try again');\n    }\n\n    // check if is balance available\n    if (!transactions.isAmountAvailable(accountDetails)) {\n        ctx.throw(400, 'The requested transfer amount is not available');\n    }\n\n    // if balance available initiate transfer\n    [accountDetails, transactionId] = await transactions.transferAmount(accountDetails);\n\n    let response = {id: transactionId};\n\n    // prepare response\n    for (let account of accountDetails) {\n        if (parseFloat(account['account_no']) === parseFloat(ctx.request.body['from'])) {\n            response['from'] = account;\n        }\n\n        if (parseFloat(account['account_no']) === parseFloat(ctx.request.body['to'])) {\n            response['to'] = account;\n        }\n    }\n\n    response['transferred'] = parseFloat(ctx.request.body['amount']).toFixed(2);\n\n    ctx.body = response;\n\n    await next();\n});\n\nexport default router;\n"]}